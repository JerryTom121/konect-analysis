#! /bin/sh
#
# Generate list of datasets.
#
# PARAMETERS
#	$verbose	Enable verbose mode when not empty 
#
# INPUT		
#	dat/networks.asc
#
# OUTPUT	
#	dat/CLASSES
#	dat/NETWORKS_CLASS_$CLASS  for all classes
#

set -e

[ "$verbose" ] && exec 4>&2 || exec 4>/dev/null

# Keep the outputs to 3 in, so we can convert them to individual files later. 
exec 3>/dev/null 

echo >&3 "# Autogenerated by $0 at $(date +%FT%T -u)"

# Note:  all variable names $NETWORKS_* are sorted by the filesize of
# the networks, from smallest to largest, as inherited from the file
# "dat/networks.asc". 

#
# Networks by weights / time (TODO:  put into own files) 
#

echo >&3 
echo >&3 -n 'NETWORKS_UNWEIGHTED := '
echo >&3 `grep -E " unweighted " dat/networks.asc | cut -f1 -d ' '`

echo >&3 
echo >&3 -n 'NETWORKS_POSITIVE := '
echo >&3 `grep -E " positive " dat/networks.asc | cut -f1 -d ' '`

echo >&3 
echo >&3 -n 'NETWORKS_POSWEIGHTED := '
echo >&3 `grep -E " posweighted " dat/networks.asc | cut -f1 -d ' '`

echo >&3 
echo >&3 -n 'NETWORKS_SIGNED := '
echo >&3 `grep -E " signed " dat/networks.asc | cut -f1 -d ' '`

echo >&3 
echo >&3 -n 'NETWORKS_WEIGHTED := '
echo >&3 `grep -E " weighted " dat/networks.asc | cut -f1 -d ' '`

echo >&3 
echo >&3 -n 'NETWORKS_MULTIWEIGHTED := '
echo >&3 `grep -E " multiweighted " dat/networks.asc | cut -f1 -d ' '`

echo >&3 
echo >&3 -n 'NETWORKS_DYNAMIC := '
echo >&3 `grep -E " dynamic " dat/networks.asc | cut -f1 -d ' '`

echo >&3
echo >&3 -n 'NETWORKS_NONUNWEIGHTED := '
echo >&3 `grep -vE " unweighted " dat/networks.asc | cut -f1 -d ' '`

echo >&3 
echo >&3 -n 'NETWORKS_TIME_WEIGHTED := '
echo >&3 `grep ' t ' dat/networks.asc | grep -E " weighted " | cut -f1 -d ' '`

#
# Classes of datasets
#
# Datasets are sorted into classes.  Each class consists of a set of
# datasets.  
#
# Classes are named "1", "2", "3", etc., where "1" contains
# the 10 smallest datasets, "2" the 20 smallest, etc.  Random networks
# are excluded from these classes.
#
# The class "test" contains all the test network (the smallest of each
# type). The "test" class is defined in the Makefile. 
#
# "all" is used as a class to denote all networks. 
#

#
# A minimal representative subset of all datasets, covering all cases:
#
# Bipartite, weighted, timestamps
# Bipartite, multiple edges, timestamps 
# Directed, multiple edges, timestamps
# Directed, signed edges, timestamps
# Undirected, multiple edges, timestamps
# Undirected, unweighted, no timestamps
#

echo escorts opsahl-ucforum elec contact as20000102 opsahl-ucsocial >dat/NETWORKS_CLASS_test

NETWORKS_PER_CLASS=10

CLASS=1
CLASS_LAST=0

echo test >dat/CLASSES 

COUNT=0

for NETWORK in $(<dat/networks.asc cut -d ' ' -f 1 | grep -v ^random-)
do  
    COUNT="$(expr $COUNT + 1)"

    if [ $COUNT -gt $NETWORKS_PER_CLASS ] ; then CLASS="$(expr $CLASS + 1)" ; COUNT=1 ; fi

    if [ $CLASS -ne $CLASS_LAST ] 
    then 
	if [ $CLASS = 1 ]; then
	    printf '' >dat/NETWORKS_CLASS_$CLASS
	else
	    cp dat/NETWORKS_CLASS_$(expr $CLASS - 1) dat/NETWORKS_CLASS_$CLASS
	fi
	echo "$CLASS" >>dat/CLASSES
    fi 
    
    CLASS_LAST=$CLASS

    echo >>dat/NETWORKS_CLASS_$CLASS $NETWORK
done

cp dat/NETWORKS_CLASS_$CLASS_LAST dat/NETWORKS_CLASS_everything 

echo everything >>dat/CLASSES

echo >&3
echo >&3 NETWORKS_INCOMPLETE := `grep -l '#incomplete' uni/meta.* | sed -E -e 's,^uni/meta\.,,'`

echo >&3
echo >&3 'NETWORKS_NOPREDICTION := genre-example opsahl-southernwomen'
echo >&3

cat dat/CLASSES |
while read class 
do
    if [ "$class" = test ]
    then
	# For the class "test", don't filter small networks out, or
	# otherwise the test would be empty.  
	echo >&3 'NETWORKS_PREDICTION_'$class' := $(NETWORKS_'$class')'
    else
	echo >&3 'NETWORKS_PREDICTION_'$class' := $(filter-out $(NETWORKS_NOPREDICTION), $(NETWORKS_'$class'))'
    fi
done

# All dependencies should be older
touch dat/NETWORKS_CLASS_*
