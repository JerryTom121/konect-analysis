#! /bin/sh
#
# Show the currently running MATLAB processes started with ./matlab.
# This calls ps(1) and presents the results in a nice way.   
#
# All shown runtimes are CPU times, not wall clock times. 
#
# MECHANISM 
#
# To show the time left for a task, a program outputs, at regular
# intervals, strings of the form
#
#     [TIMESPEC left]
#
# where TIMESPEC is the time left in free form.  The string does not
# need to be alone on a line. 
#

# Format for the printf(1) command
format='%4s %10s %11s %13s %s\n'

# Header line
printf "$format" "%CPU" "Mem [k]" "Runtime" "Runtime left" "Log"

TMPDIR="${TMPDIR-/tmp}"
TMPDIR_esc="$(echo "$TMPDIR" | sed -E -e 's,/,\\/,g')"

# Note:  'ps -C' is not POSIX-compliant.

ps k-cputime -o %cpu,cputime,vsize,user,command | 
sed -E -e '1d;/'"$TMPDIR_esc"'/!d' |
while IFS= read -r line
do
	cpu="$(echo "$line" | sed -E -e 's,^\s*(\S+)\s.*$,\1,;s,\.[0-9]$,,')" 
	time="$(echo "$line" | sed -E -e 's,^\s*,,' | cut -f 2 -d ' ' | sed -E -e 's,^[0:]*(.*....)$,\1,')"
	vsize="$(echo "$line" | sed -E -e 's,^\s*\S+\s+\S+\s+(\S+)\s.*$,\1,')"
	logfile="$(echo "$line" | sed -E -e 's,^.*\s('"$TMPDIR_esc"'\S+).*$,\1,')"

	if expr "$logfile" : '.*\.log' >/dev/null ; then
		# 'tac' may report an error if the logfile was not (yet)
		# created.  Ignore this error.  
		left="$(tac "$logfile" 2>/dev/null | sed -E -e '/left]/!d;s,^.*\[(.*) left\].*$,\1,;q')"
	else
		left=
	fi
	
	printf "$format" "$cpu" "$vsize" "$time" "$left" "$logfile"
done				
